/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: parameters.proto */

#ifndef PROTOBUF_C_parameters_2eproto__INCLUDED
#define PROTOBUF_C_parameters_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Orbiterkep__ParamMinMax Orbiterkep__ParamMinMax;
typedef struct _Orbiterkep__Parameters Orbiterkep__Parameters;


/* --- enums --- */


/* --- messages --- */

struct  _Orbiterkep__ParamMinMax
{
  ProtobufCMessage base;
  protobuf_c_boolean has_min;
  double min;
  protobuf_c_boolean has_max;
  double max;
};
#define ORBITERKEP__PARAM_MIN_MAX__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&orbiterkep__param_min_max__descriptor) \
    , 0,0, 0,0 }


struct  _Orbiterkep__Parameters
{
  ProtobufCMessage base;
  size_t n_planets;
  char **planets;
  size_t n_single_objective_algos;
  char **single_objective_algos;
  size_t n_multi_objective_algos;
  char **multi_objective_algos;
  Orbiterkep__ParamMinMax *t0;
  Orbiterkep__ParamMinMax *tof;
  Orbiterkep__ParamMinMax *vinf;
  char *problem;
  protobuf_c_boolean has_n_trials;
  int32_t n_trials;
  protobuf_c_boolean has_n_gen;
  int32_t n_gen;
  protobuf_c_boolean has_dep_altitude;
  double dep_altitude;
  protobuf_c_boolean has_arr_altitude;
  double arr_altitude;
  protobuf_c_boolean has_max_deltav;
  double max_deltav;
  protobuf_c_boolean has_add_dep_vinf;
  protobuf_c_boolean add_dep_vinf;
  protobuf_c_boolean has_add_arr_vinf;
  protobuf_c_boolean add_arr_vinf;
  protobuf_c_boolean has_use_spice;
  protobuf_c_boolean use_spice;
  protobuf_c_boolean has_circularize;
  protobuf_c_boolean circularize;
  protobuf_c_boolean has_multi_objective;
  protobuf_c_boolean multi_objective;
  protobuf_c_boolean has_use_db;
  protobuf_c_boolean use_db;
};
#define ORBITERKEP__PARAMETERS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&orbiterkep__parameters__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL, NULL, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/* Orbiterkep__ParamMinMax methods */
void   orbiterkep__param_min_max__init
                     (Orbiterkep__ParamMinMax         *message);
size_t orbiterkep__param_min_max__get_packed_size
                     (const Orbiterkep__ParamMinMax   *message);
size_t orbiterkep__param_min_max__pack
                     (const Orbiterkep__ParamMinMax   *message,
                      uint8_t             *out);
size_t orbiterkep__param_min_max__pack_to_buffer
                     (const Orbiterkep__ParamMinMax   *message,
                      ProtobufCBuffer     *buffer);
Orbiterkep__ParamMinMax *
       orbiterkep__param_min_max__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   orbiterkep__param_min_max__free_unpacked
                     (Orbiterkep__ParamMinMax *message,
                      ProtobufCAllocator *allocator);
/* Orbiterkep__Parameters methods */
void   orbiterkep__parameters__init
                     (Orbiterkep__Parameters         *message);
size_t orbiterkep__parameters__get_packed_size
                     (const Orbiterkep__Parameters   *message);
size_t orbiterkep__parameters__pack
                     (const Orbiterkep__Parameters   *message,
                      uint8_t             *out);
size_t orbiterkep__parameters__pack_to_buffer
                     (const Orbiterkep__Parameters   *message,
                      ProtobufCBuffer     *buffer);
Orbiterkep__Parameters *
       orbiterkep__parameters__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   orbiterkep__parameters__free_unpacked
                     (Orbiterkep__Parameters *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Orbiterkep__ParamMinMax_Closure)
                 (const Orbiterkep__ParamMinMax *message,
                  void *closure_data);
typedef void (*Orbiterkep__Parameters_Closure)
                 (const Orbiterkep__Parameters *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor orbiterkep__param_min_max__descriptor;
extern const ProtobufCMessageDescriptor orbiterkep__parameters__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_parameters_2eproto__INCLUDED */
