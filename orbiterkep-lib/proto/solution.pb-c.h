/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: solution.proto */

#ifndef PROTOBUF_C_solution_2eproto__INCLUDED
#define PROTOBUF_C_solution_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Orbiterkep__TransXTimes Orbiterkep__TransXTimes;
typedef struct _Orbiterkep__TransXEscape Orbiterkep__TransXEscape;
typedef struct _Orbiterkep__TransXDSM Orbiterkep__TransXDSM;
typedef struct _Orbiterkep__TransXFlyBy Orbiterkep__TransXFlyBy;
typedef struct _Orbiterkep__TransXArrival Orbiterkep__TransXArrival;
typedef struct _Orbiterkep__TransXSolution Orbiterkep__TransXSolution;


/* --- enums --- */


/* --- messages --- */

struct  _Orbiterkep__TransXTimes
{
  ProtobufCMessage base;
  size_t n_planets;
  char **planets;
  size_t n_times;
  double *times;
};
#define ORBITERKEP__TRANS_XTIMES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&orbiterkep__trans_xtimes__descriptor) \
    , 0,NULL, 0,NULL }


struct  _Orbiterkep__TransXEscape
{
  ProtobufCMessage base;
  double mjd;
  double vinf;
  double burn;
  double prograde;
  double outward;
  double plane;
  char *planet;
};
#define ORBITERKEP__TRANS_XESCAPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&orbiterkep__trans_xescape__descriptor) \
    , 0, 0, 0, 0, 0, 0, NULL }


struct  _Orbiterkep__TransXDSM
{
  ProtobufCMessage base;
  double mjd;
  double vinf;
  double burn;
  double prograde;
  double outward;
  double plane;
};
#define ORBITERKEP__TRANS_XDSM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&orbiterkep__trans_xdsm__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  _Orbiterkep__TransXFlyBy
{
  ProtobufCMessage base;
  double mjd;
  double burn;
  double prograde;
  double outward;
  double plane;
  double approach_vel;
  double departure_vel;
  double outward_angle;
  double inclination;
  double turning_angle;
  double periapsis_altitude;
  char *planet;
};
#define ORBITERKEP__TRANS_XFLY_BY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&orbiterkep__trans_xfly_by__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL }


struct  _Orbiterkep__TransXArrival
{
  ProtobufCMessage base;
  double mjd;
  double vinf;
  double burn;
  char *planet;
};
#define ORBITERKEP__TRANS_XARRIVAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&orbiterkep__trans_xarrival__descriptor) \
    , 0, 0, 0, NULL }


struct  _Orbiterkep__TransXSolution
{
  ProtobufCMessage base;
  size_t n_x;
  double *x;
  char *problem;
  double fuel_cost;
  Orbiterkep__TransXTimes *times;
  Orbiterkep__TransXEscape *escape;
  size_t n_dsms;
  Orbiterkep__TransXDSM **dsms;
  size_t n_flybyes;
  Orbiterkep__TransXFlyBy **flybyes;
  Orbiterkep__TransXArrival *arrival;
};
#define ORBITERKEP__TRANS_XSOLUTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&orbiterkep__trans_xsolution__descriptor) \
    , 0,NULL, NULL, 0, NULL, NULL, 0,NULL, 0,NULL, NULL }


/* Orbiterkep__TransXTimes methods */
void   orbiterkep__trans_xtimes__init
                     (Orbiterkep__TransXTimes         *message);
size_t orbiterkep__trans_xtimes__get_packed_size
                     (const Orbiterkep__TransXTimes   *message);
size_t orbiterkep__trans_xtimes__pack
                     (const Orbiterkep__TransXTimes   *message,
                      uint8_t             *out);
size_t orbiterkep__trans_xtimes__pack_to_buffer
                     (const Orbiterkep__TransXTimes   *message,
                      ProtobufCBuffer     *buffer);
Orbiterkep__TransXTimes *
       orbiterkep__trans_xtimes__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   orbiterkep__trans_xtimes__free_unpacked
                     (Orbiterkep__TransXTimes *message,
                      ProtobufCAllocator *allocator);
/* Orbiterkep__TransXEscape methods */
void   orbiterkep__trans_xescape__init
                     (Orbiterkep__TransXEscape         *message);
size_t orbiterkep__trans_xescape__get_packed_size
                     (const Orbiterkep__TransXEscape   *message);
size_t orbiterkep__trans_xescape__pack
                     (const Orbiterkep__TransXEscape   *message,
                      uint8_t             *out);
size_t orbiterkep__trans_xescape__pack_to_buffer
                     (const Orbiterkep__TransXEscape   *message,
                      ProtobufCBuffer     *buffer);
Orbiterkep__TransXEscape *
       orbiterkep__trans_xescape__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   orbiterkep__trans_xescape__free_unpacked
                     (Orbiterkep__TransXEscape *message,
                      ProtobufCAllocator *allocator);
/* Orbiterkep__TransXDSM methods */
void   orbiterkep__trans_xdsm__init
                     (Orbiterkep__TransXDSM         *message);
size_t orbiterkep__trans_xdsm__get_packed_size
                     (const Orbiterkep__TransXDSM   *message);
size_t orbiterkep__trans_xdsm__pack
                     (const Orbiterkep__TransXDSM   *message,
                      uint8_t             *out);
size_t orbiterkep__trans_xdsm__pack_to_buffer
                     (const Orbiterkep__TransXDSM   *message,
                      ProtobufCBuffer     *buffer);
Orbiterkep__TransXDSM *
       orbiterkep__trans_xdsm__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   orbiterkep__trans_xdsm__free_unpacked
                     (Orbiterkep__TransXDSM *message,
                      ProtobufCAllocator *allocator);
/* Orbiterkep__TransXFlyBy methods */
void   orbiterkep__trans_xfly_by__init
                     (Orbiterkep__TransXFlyBy         *message);
size_t orbiterkep__trans_xfly_by__get_packed_size
                     (const Orbiterkep__TransXFlyBy   *message);
size_t orbiterkep__trans_xfly_by__pack
                     (const Orbiterkep__TransXFlyBy   *message,
                      uint8_t             *out);
size_t orbiterkep__trans_xfly_by__pack_to_buffer
                     (const Orbiterkep__TransXFlyBy   *message,
                      ProtobufCBuffer     *buffer);
Orbiterkep__TransXFlyBy *
       orbiterkep__trans_xfly_by__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   orbiterkep__trans_xfly_by__free_unpacked
                     (Orbiterkep__TransXFlyBy *message,
                      ProtobufCAllocator *allocator);
/* Orbiterkep__TransXArrival methods */
void   orbiterkep__trans_xarrival__init
                     (Orbiterkep__TransXArrival         *message);
size_t orbiterkep__trans_xarrival__get_packed_size
                     (const Orbiterkep__TransXArrival   *message);
size_t orbiterkep__trans_xarrival__pack
                     (const Orbiterkep__TransXArrival   *message,
                      uint8_t             *out);
size_t orbiterkep__trans_xarrival__pack_to_buffer
                     (const Orbiterkep__TransXArrival   *message,
                      ProtobufCBuffer     *buffer);
Orbiterkep__TransXArrival *
       orbiterkep__trans_xarrival__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   orbiterkep__trans_xarrival__free_unpacked
                     (Orbiterkep__TransXArrival *message,
                      ProtobufCAllocator *allocator);
/* Orbiterkep__TransXSolution methods */
void   orbiterkep__trans_xsolution__init
                     (Orbiterkep__TransXSolution         *message);
size_t orbiterkep__trans_xsolution__get_packed_size
                     (const Orbiterkep__TransXSolution   *message);
size_t orbiterkep__trans_xsolution__pack
                     (const Orbiterkep__TransXSolution   *message,
                      uint8_t             *out);
size_t orbiterkep__trans_xsolution__pack_to_buffer
                     (const Orbiterkep__TransXSolution   *message,
                      ProtobufCBuffer     *buffer);
Orbiterkep__TransXSolution *
       orbiterkep__trans_xsolution__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   orbiterkep__trans_xsolution__free_unpacked
                     (Orbiterkep__TransXSolution *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Orbiterkep__TransXTimes_Closure)
                 (const Orbiterkep__TransXTimes *message,
                  void *closure_data);
typedef void (*Orbiterkep__TransXEscape_Closure)
                 (const Orbiterkep__TransXEscape *message,
                  void *closure_data);
typedef void (*Orbiterkep__TransXDSM_Closure)
                 (const Orbiterkep__TransXDSM *message,
                  void *closure_data);
typedef void (*Orbiterkep__TransXFlyBy_Closure)
                 (const Orbiterkep__TransXFlyBy *message,
                  void *closure_data);
typedef void (*Orbiterkep__TransXArrival_Closure)
                 (const Orbiterkep__TransXArrival *message,
                  void *closure_data);
typedef void (*Orbiterkep__TransXSolution_Closure)
                 (const Orbiterkep__TransXSolution *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor orbiterkep__trans_xtimes__descriptor;
extern const ProtobufCMessageDescriptor orbiterkep__trans_xescape__descriptor;
extern const ProtobufCMessageDescriptor orbiterkep__trans_xdsm__descriptor;
extern const ProtobufCMessageDescriptor orbiterkep__trans_xfly_by__descriptor;
extern const ProtobufCMessageDescriptor orbiterkep__trans_xarrival__descriptor;
extern const ProtobufCMessageDescriptor orbiterkep__trans_xsolution__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_solution_2eproto__INCLUDED */
