// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/solution.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/solution.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pagmo {
namespace problem {

namespace {

const ::google::protobuf::Descriptor* TransXTimes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransXTimes_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransXEscape_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransXEscape_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransXDSM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransXDSM_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransXFlyBy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransXFlyBy_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransXArrival_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransXArrival_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransXSolution_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransXSolution_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fsolution_2eproto() {
  protobuf_AddDesc_proto_2fsolution_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/solution.proto");
  GOOGLE_CHECK(file != NULL);
  TransXTimes_descriptor_ = file->message_type(0);
  static const int TransXTimes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXTimes, planets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXTimes, times_),
  };
  TransXTimes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransXTimes_descriptor_,
      TransXTimes::default_instance_,
      TransXTimes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXTimes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXTimes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransXTimes));
  TransXEscape_descriptor_ = file->message_type(1);
  static const int TransXEscape_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXEscape, mjd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXEscape, vinf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXEscape, burn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXEscape, prograde_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXEscape, outward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXEscape, plane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXEscape, planet_),
  };
  TransXEscape_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransXEscape_descriptor_,
      TransXEscape::default_instance_,
      TransXEscape_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXEscape, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXEscape, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransXEscape));
  TransXDSM_descriptor_ = file->message_type(2);
  static const int TransXDSM_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXDSM, mjd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXDSM, vinf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXDSM, burn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXDSM, prograde_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXDSM, outward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXDSM, plane_),
  };
  TransXDSM_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransXDSM_descriptor_,
      TransXDSM::default_instance_,
      TransXDSM_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXDSM, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXDSM, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransXDSM));
  TransXFlyBy_descriptor_ = file->message_type(3);
  static const int TransXFlyBy_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXFlyBy, mjd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXFlyBy, burn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXFlyBy, prograde_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXFlyBy, outward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXFlyBy, plane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXFlyBy, approach_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXFlyBy, departure_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXFlyBy, outward_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXFlyBy, inclination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXFlyBy, turning_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXFlyBy, periapsis_altitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXFlyBy, planet_),
  };
  TransXFlyBy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransXFlyBy_descriptor_,
      TransXFlyBy::default_instance_,
      TransXFlyBy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXFlyBy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXFlyBy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransXFlyBy));
  TransXArrival_descriptor_ = file->message_type(4);
  static const int TransXArrival_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXArrival, mjd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXArrival, vinf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXArrival, burn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXArrival, planet_),
  };
  TransXArrival_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransXArrival_descriptor_,
      TransXArrival::default_instance_,
      TransXArrival_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXArrival, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXArrival, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransXArrival));
  TransXSolution_descriptor_ = file->message_type(5);
  static const int TransXSolution_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXSolution, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXSolution, problem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXSolution, fuel_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXSolution, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXSolution, escape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXSolution, dsms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXSolution, flybyes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXSolution, arrival_),
  };
  TransXSolution_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransXSolution_descriptor_,
      TransXSolution::default_instance_,
      TransXSolution_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXSolution, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransXSolution, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransXSolution));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fsolution_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransXTimes_descriptor_, &TransXTimes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransXEscape_descriptor_, &TransXEscape::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransXDSM_descriptor_, &TransXDSM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransXFlyBy_descriptor_, &TransXFlyBy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransXArrival_descriptor_, &TransXArrival::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransXSolution_descriptor_, &TransXSolution::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fsolution_2eproto() {
  delete TransXTimes::default_instance_;
  delete TransXTimes_reflection_;
  delete TransXEscape::default_instance_;
  delete TransXEscape_reflection_;
  delete TransXDSM::default_instance_;
  delete TransXDSM_reflection_;
  delete TransXFlyBy::default_instance_;
  delete TransXFlyBy_reflection_;
  delete TransXArrival::default_instance_;
  delete TransXArrival_reflection_;
  delete TransXSolution::default_instance_;
  delete TransXSolution_reflection_;
}

void protobuf_AddDesc_proto_2fsolution_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024proto/solution.proto\022\rpagmo.problem\"-\n"
    "\013TransXTimes\022\017\n\007planets\030\001 \003(\t\022\r\n\005times\030\002"
    " \003(\001\"y\n\014TransXEscape\022\013\n\003mjd\030\001 \002(\001\022\014\n\004vin"
    "f\030\002 \002(\001\022\014\n\004burn\030\003 \002(\001\022\020\n\010prograde\030\004 \002(\001\022"
    "\017\n\007outward\030\005 \002(\001\022\r\n\005plane\030\006 \002(\001\022\016\n\006plane"
    "t\030\024 \002(\t\"f\n\tTransXDSM\022\013\n\003mjd\030\001 \002(\001\022\014\n\004vin"
    "f\030\002 \002(\001\022\014\n\004burn\030\003 \002(\001\022\020\n\010prograde\030\004 \002(\001\022"
    "\017\n\007outward\030\005 \002(\001\022\r\n\005plane\030\006 \002(\001\"\366\001\n\013Tran"
    "sXFlyBy\022\013\n\003mjd\030\001 \002(\001\022\014\n\004burn\030\003 \002(\001\022\020\n\010pr"
    "ograde\030\004 \002(\001\022\017\n\007outward\030\005 \002(\001\022\r\n\005plane\030\006"
    " \002(\001\022\024\n\014approach_vel\030\007 \002(\001\022\025\n\rdeparture_"
    "vel\030\010 \002(\001\022\025\n\routward_angle\030\t \002(\001\022\023\n\013incl"
    "ination\030\n \002(\001\022\025\n\rturning_angle\030\013 \002(\001\022\032\n\022"
    "periapsis_altitude\030\014 \002(\001\022\016\n\006planet\030\024 \002(\t"
    "\"H\n\rTransXArrival\022\013\n\003mjd\030\001 \002(\001\022\014\n\004vinf\030\002"
    " \002(\001\022\014\n\004burn\030\003 \002(\001\022\016\n\006planet\030\024 \002(\t\"\233\002\n\016T"
    "ransXSolution\022\t\n\001x\030\001 \003(\001\022\017\n\007problem\030\002 \002("
    "\t\022\021\n\tfuel_cost\030\003 \002(\001\022)\n\005times\030\004 \002(\0132\032.pa"
    "gmo.problem.TransXTimes\022+\n\006escape\030\005 \002(\0132"
    "\033.pagmo.problem.TransXEscape\022&\n\004dsms\030\006 \003"
    "(\0132\030.pagmo.problem.TransXDSM\022+\n\007flybyes\030"
    "\007 \003(\0132\032.pagmo.problem.TransXFlyBy\022-\n\007arr"
    "ival\030\010 \002(\0132\034.pagmo.problem.TransXArrival", 920);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/solution.proto", &protobuf_RegisterTypes);
  TransXTimes::default_instance_ = new TransXTimes();
  TransXEscape::default_instance_ = new TransXEscape();
  TransXDSM::default_instance_ = new TransXDSM();
  TransXFlyBy::default_instance_ = new TransXFlyBy();
  TransXArrival::default_instance_ = new TransXArrival();
  TransXSolution::default_instance_ = new TransXSolution();
  TransXTimes::default_instance_->InitAsDefaultInstance();
  TransXEscape::default_instance_->InitAsDefaultInstance();
  TransXDSM::default_instance_->InitAsDefaultInstance();
  TransXFlyBy::default_instance_->InitAsDefaultInstance();
  TransXArrival::default_instance_->InitAsDefaultInstance();
  TransXSolution::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fsolution_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fsolution_2eproto {
  StaticDescriptorInitializer_proto_2fsolution_2eproto() {
    protobuf_AddDesc_proto_2fsolution_2eproto();
  }
} static_descriptor_initializer_proto_2fsolution_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TransXTimes::kPlanetsFieldNumber;
const int TransXTimes::kTimesFieldNumber;
#endif  // !_MSC_VER

TransXTimes::TransXTimes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pagmo.problem.TransXTimes)
}

void TransXTimes::InitAsDefaultInstance() {
}

TransXTimes::TransXTimes(const TransXTimes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pagmo.problem.TransXTimes)
}

void TransXTimes::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransXTimes::~TransXTimes() {
  // @@protoc_insertion_point(destructor:pagmo.problem.TransXTimes)
  SharedDtor();
}

void TransXTimes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransXTimes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransXTimes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransXTimes_descriptor_;
}

const TransXTimes& TransXTimes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fsolution_2eproto();
  return *default_instance_;
}

TransXTimes* TransXTimes::default_instance_ = NULL;

TransXTimes* TransXTimes::New() const {
  return new TransXTimes;
}

void TransXTimes::Clear() {
  planets_.Clear();
  times_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransXTimes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pagmo.problem.TransXTimes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string planets = 1;
      case 1: {
        if (tag == 10) {
         parse_planets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_planets()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->planets(this->planets_size() - 1).data(),
            this->planets(this->planets_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "planets");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_planets;
        if (input->ExpectTag(17)) goto parse_times;
        break;
      }

      // repeated double times = 2;
      case 2: {
        if (tag == 17) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_times())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_times())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_times;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pagmo.problem.TransXTimes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pagmo.problem.TransXTimes)
  return false;
#undef DO_
}

void TransXTimes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pagmo.problem.TransXTimes)
  // repeated string planets = 1;
  for (int i = 0; i < this->planets_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->planets(i).data(), this->planets(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "planets");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->planets(i), output);
  }

  // repeated double times = 2;
  for (int i = 0; i < this->times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->times(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pagmo.problem.TransXTimes)
}

::google::protobuf::uint8* TransXTimes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pagmo.problem.TransXTimes)
  // repeated string planets = 1;
  for (int i = 0; i < this->planets_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->planets(i).data(), this->planets(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "planets");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->planets(i), target);
  }

  // repeated double times = 2;
  for (int i = 0; i < this->times_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->times(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pagmo.problem.TransXTimes)
  return target;
}

int TransXTimes::ByteSize() const {
  int total_size = 0;

  // repeated string planets = 1;
  total_size += 1 * this->planets_size();
  for (int i = 0; i < this->planets_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->planets(i));
  }

  // repeated double times = 2;
  {
    int data_size = 0;
    data_size = 8 * this->times_size();
    total_size += 1 * this->times_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransXTimes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransXTimes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransXTimes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransXTimes::MergeFrom(const TransXTimes& from) {
  GOOGLE_CHECK_NE(&from, this);
  planets_.MergeFrom(from.planets_);
  times_.MergeFrom(from.times_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransXTimes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransXTimes::CopyFrom(const TransXTimes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransXTimes::IsInitialized() const {

  return true;
}

void TransXTimes::Swap(TransXTimes* other) {
  if (other != this) {
    planets_.Swap(&other->planets_);
    times_.Swap(&other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransXTimes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransXTimes_descriptor_;
  metadata.reflection = TransXTimes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransXEscape::kMjdFieldNumber;
const int TransXEscape::kVinfFieldNumber;
const int TransXEscape::kBurnFieldNumber;
const int TransXEscape::kProgradeFieldNumber;
const int TransXEscape::kOutwardFieldNumber;
const int TransXEscape::kPlaneFieldNumber;
const int TransXEscape::kPlanetFieldNumber;
#endif  // !_MSC_VER

TransXEscape::TransXEscape()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pagmo.problem.TransXEscape)
}

void TransXEscape::InitAsDefaultInstance() {
}

TransXEscape::TransXEscape(const TransXEscape& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pagmo.problem.TransXEscape)
}

void TransXEscape::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mjd_ = 0;
  vinf_ = 0;
  burn_ = 0;
  prograde_ = 0;
  outward_ = 0;
  plane_ = 0;
  planet_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransXEscape::~TransXEscape() {
  // @@protoc_insertion_point(destructor:pagmo.problem.TransXEscape)
  SharedDtor();
}

void TransXEscape::SharedDtor() {
  if (planet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete planet_;
  }
  if (this != default_instance_) {
  }
}

void TransXEscape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransXEscape::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransXEscape_descriptor_;
}

const TransXEscape& TransXEscape::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fsolution_2eproto();
  return *default_instance_;
}

TransXEscape* TransXEscape::default_instance_ = NULL;

TransXEscape* TransXEscape::New() const {
  return new TransXEscape;
}

void TransXEscape::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TransXEscape*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(mjd_, plane_);
    if (has_planet()) {
      if (planet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        planet_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransXEscape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pagmo.problem.TransXEscape)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double mjd = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mjd_)));
          set_has_mjd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_vinf;
        break;
      }

      // required double vinf = 2;
      case 2: {
        if (tag == 17) {
         parse_vinf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vinf_)));
          set_has_vinf();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_burn;
        break;
      }

      // required double burn = 3;
      case 3: {
        if (tag == 25) {
         parse_burn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &burn_)));
          set_has_burn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_prograde;
        break;
      }

      // required double prograde = 4;
      case 4: {
        if (tag == 33) {
         parse_prograde:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prograde_)));
          set_has_prograde();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_outward;
        break;
      }

      // required double outward = 5;
      case 5: {
        if (tag == 41) {
         parse_outward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &outward_)));
          set_has_outward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_plane;
        break;
      }

      // required double plane = 6;
      case 6: {
        if (tag == 49) {
         parse_plane:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &plane_)));
          set_has_plane();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_planet;
        break;
      }

      // required string planet = 20;
      case 20: {
        if (tag == 162) {
         parse_planet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_planet()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->planet().data(), this->planet().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "planet");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pagmo.problem.TransXEscape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pagmo.problem.TransXEscape)
  return false;
#undef DO_
}

void TransXEscape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pagmo.problem.TransXEscape)
  // required double mjd = 1;
  if (has_mjd()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->mjd(), output);
  }

  // required double vinf = 2;
  if (has_vinf()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->vinf(), output);
  }

  // required double burn = 3;
  if (has_burn()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->burn(), output);
  }

  // required double prograde = 4;
  if (has_prograde()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->prograde(), output);
  }

  // required double outward = 5;
  if (has_outward()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->outward(), output);
  }

  // required double plane = 6;
  if (has_plane()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->plane(), output);
  }

  // required string planet = 20;
  if (has_planet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->planet().data(), this->planet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "planet");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->planet(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pagmo.problem.TransXEscape)
}

::google::protobuf::uint8* TransXEscape::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pagmo.problem.TransXEscape)
  // required double mjd = 1;
  if (has_mjd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->mjd(), target);
  }

  // required double vinf = 2;
  if (has_vinf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->vinf(), target);
  }

  // required double burn = 3;
  if (has_burn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->burn(), target);
  }

  // required double prograde = 4;
  if (has_prograde()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->prograde(), target);
  }

  // required double outward = 5;
  if (has_outward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->outward(), target);
  }

  // required double plane = 6;
  if (has_plane()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->plane(), target);
  }

  // required string planet = 20;
  if (has_planet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->planet().data(), this->planet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "planet");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->planet(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pagmo.problem.TransXEscape)
  return target;
}

int TransXEscape::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double mjd = 1;
    if (has_mjd()) {
      total_size += 1 + 8;
    }

    // required double vinf = 2;
    if (has_vinf()) {
      total_size += 1 + 8;
    }

    // required double burn = 3;
    if (has_burn()) {
      total_size += 1 + 8;
    }

    // required double prograde = 4;
    if (has_prograde()) {
      total_size += 1 + 8;
    }

    // required double outward = 5;
    if (has_outward()) {
      total_size += 1 + 8;
    }

    // required double plane = 6;
    if (has_plane()) {
      total_size += 1 + 8;
    }

    // required string planet = 20;
    if (has_planet()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->planet());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransXEscape::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransXEscape* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransXEscape*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransXEscape::MergeFrom(const TransXEscape& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mjd()) {
      set_mjd(from.mjd());
    }
    if (from.has_vinf()) {
      set_vinf(from.vinf());
    }
    if (from.has_burn()) {
      set_burn(from.burn());
    }
    if (from.has_prograde()) {
      set_prograde(from.prograde());
    }
    if (from.has_outward()) {
      set_outward(from.outward());
    }
    if (from.has_plane()) {
      set_plane(from.plane());
    }
    if (from.has_planet()) {
      set_planet(from.planet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransXEscape::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransXEscape::CopyFrom(const TransXEscape& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransXEscape::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void TransXEscape::Swap(TransXEscape* other) {
  if (other != this) {
    std::swap(mjd_, other->mjd_);
    std::swap(vinf_, other->vinf_);
    std::swap(burn_, other->burn_);
    std::swap(prograde_, other->prograde_);
    std::swap(outward_, other->outward_);
    std::swap(plane_, other->plane_);
    std::swap(planet_, other->planet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransXEscape::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransXEscape_descriptor_;
  metadata.reflection = TransXEscape_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransXDSM::kMjdFieldNumber;
const int TransXDSM::kVinfFieldNumber;
const int TransXDSM::kBurnFieldNumber;
const int TransXDSM::kProgradeFieldNumber;
const int TransXDSM::kOutwardFieldNumber;
const int TransXDSM::kPlaneFieldNumber;
#endif  // !_MSC_VER

TransXDSM::TransXDSM()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pagmo.problem.TransXDSM)
}

void TransXDSM::InitAsDefaultInstance() {
}

TransXDSM::TransXDSM(const TransXDSM& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pagmo.problem.TransXDSM)
}

void TransXDSM::SharedCtor() {
  _cached_size_ = 0;
  mjd_ = 0;
  vinf_ = 0;
  burn_ = 0;
  prograde_ = 0;
  outward_ = 0;
  plane_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransXDSM::~TransXDSM() {
  // @@protoc_insertion_point(destructor:pagmo.problem.TransXDSM)
  SharedDtor();
}

void TransXDSM::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransXDSM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransXDSM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransXDSM_descriptor_;
}

const TransXDSM& TransXDSM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fsolution_2eproto();
  return *default_instance_;
}

TransXDSM* TransXDSM::default_instance_ = NULL;

TransXDSM* TransXDSM::New() const {
  return new TransXDSM;
}

void TransXDSM::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TransXDSM*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(mjd_, plane_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransXDSM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pagmo.problem.TransXDSM)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double mjd = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mjd_)));
          set_has_mjd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_vinf;
        break;
      }

      // required double vinf = 2;
      case 2: {
        if (tag == 17) {
         parse_vinf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vinf_)));
          set_has_vinf();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_burn;
        break;
      }

      // required double burn = 3;
      case 3: {
        if (tag == 25) {
         parse_burn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &burn_)));
          set_has_burn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_prograde;
        break;
      }

      // required double prograde = 4;
      case 4: {
        if (tag == 33) {
         parse_prograde:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prograde_)));
          set_has_prograde();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_outward;
        break;
      }

      // required double outward = 5;
      case 5: {
        if (tag == 41) {
         parse_outward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &outward_)));
          set_has_outward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_plane;
        break;
      }

      // required double plane = 6;
      case 6: {
        if (tag == 49) {
         parse_plane:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &plane_)));
          set_has_plane();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pagmo.problem.TransXDSM)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pagmo.problem.TransXDSM)
  return false;
#undef DO_
}

void TransXDSM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pagmo.problem.TransXDSM)
  // required double mjd = 1;
  if (has_mjd()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->mjd(), output);
  }

  // required double vinf = 2;
  if (has_vinf()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->vinf(), output);
  }

  // required double burn = 3;
  if (has_burn()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->burn(), output);
  }

  // required double prograde = 4;
  if (has_prograde()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->prograde(), output);
  }

  // required double outward = 5;
  if (has_outward()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->outward(), output);
  }

  // required double plane = 6;
  if (has_plane()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->plane(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pagmo.problem.TransXDSM)
}

::google::protobuf::uint8* TransXDSM::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pagmo.problem.TransXDSM)
  // required double mjd = 1;
  if (has_mjd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->mjd(), target);
  }

  // required double vinf = 2;
  if (has_vinf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->vinf(), target);
  }

  // required double burn = 3;
  if (has_burn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->burn(), target);
  }

  // required double prograde = 4;
  if (has_prograde()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->prograde(), target);
  }

  // required double outward = 5;
  if (has_outward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->outward(), target);
  }

  // required double plane = 6;
  if (has_plane()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->plane(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pagmo.problem.TransXDSM)
  return target;
}

int TransXDSM::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double mjd = 1;
    if (has_mjd()) {
      total_size += 1 + 8;
    }

    // required double vinf = 2;
    if (has_vinf()) {
      total_size += 1 + 8;
    }

    // required double burn = 3;
    if (has_burn()) {
      total_size += 1 + 8;
    }

    // required double prograde = 4;
    if (has_prograde()) {
      total_size += 1 + 8;
    }

    // required double outward = 5;
    if (has_outward()) {
      total_size += 1 + 8;
    }

    // required double plane = 6;
    if (has_plane()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransXDSM::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransXDSM* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransXDSM*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransXDSM::MergeFrom(const TransXDSM& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mjd()) {
      set_mjd(from.mjd());
    }
    if (from.has_vinf()) {
      set_vinf(from.vinf());
    }
    if (from.has_burn()) {
      set_burn(from.burn());
    }
    if (from.has_prograde()) {
      set_prograde(from.prograde());
    }
    if (from.has_outward()) {
      set_outward(from.outward());
    }
    if (from.has_plane()) {
      set_plane(from.plane());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransXDSM::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransXDSM::CopyFrom(const TransXDSM& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransXDSM::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void TransXDSM::Swap(TransXDSM* other) {
  if (other != this) {
    std::swap(mjd_, other->mjd_);
    std::swap(vinf_, other->vinf_);
    std::swap(burn_, other->burn_);
    std::swap(prograde_, other->prograde_);
    std::swap(outward_, other->outward_);
    std::swap(plane_, other->plane_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransXDSM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransXDSM_descriptor_;
  metadata.reflection = TransXDSM_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransXFlyBy::kMjdFieldNumber;
const int TransXFlyBy::kBurnFieldNumber;
const int TransXFlyBy::kProgradeFieldNumber;
const int TransXFlyBy::kOutwardFieldNumber;
const int TransXFlyBy::kPlaneFieldNumber;
const int TransXFlyBy::kApproachVelFieldNumber;
const int TransXFlyBy::kDepartureVelFieldNumber;
const int TransXFlyBy::kOutwardAngleFieldNumber;
const int TransXFlyBy::kInclinationFieldNumber;
const int TransXFlyBy::kTurningAngleFieldNumber;
const int TransXFlyBy::kPeriapsisAltitudeFieldNumber;
const int TransXFlyBy::kPlanetFieldNumber;
#endif  // !_MSC_VER

TransXFlyBy::TransXFlyBy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pagmo.problem.TransXFlyBy)
}

void TransXFlyBy::InitAsDefaultInstance() {
}

TransXFlyBy::TransXFlyBy(const TransXFlyBy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pagmo.problem.TransXFlyBy)
}

void TransXFlyBy::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mjd_ = 0;
  burn_ = 0;
  prograde_ = 0;
  outward_ = 0;
  plane_ = 0;
  approach_vel_ = 0;
  departure_vel_ = 0;
  outward_angle_ = 0;
  inclination_ = 0;
  turning_angle_ = 0;
  periapsis_altitude_ = 0;
  planet_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransXFlyBy::~TransXFlyBy() {
  // @@protoc_insertion_point(destructor:pagmo.problem.TransXFlyBy)
  SharedDtor();
}

void TransXFlyBy::SharedDtor() {
  if (planet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete planet_;
  }
  if (this != default_instance_) {
  }
}

void TransXFlyBy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransXFlyBy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransXFlyBy_descriptor_;
}

const TransXFlyBy& TransXFlyBy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fsolution_2eproto();
  return *default_instance_;
}

TransXFlyBy* TransXFlyBy::default_instance_ = NULL;

TransXFlyBy* TransXFlyBy::New() const {
  return new TransXFlyBy;
}

void TransXFlyBy::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TransXFlyBy*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(mjd_, outward_angle_);
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(inclination_, periapsis_altitude_);
    if (has_planet()) {
      if (planet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        planet_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransXFlyBy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pagmo.problem.TransXFlyBy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double mjd = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mjd_)));
          set_has_mjd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_burn;
        break;
      }

      // required double burn = 3;
      case 3: {
        if (tag == 25) {
         parse_burn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &burn_)));
          set_has_burn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_prograde;
        break;
      }

      // required double prograde = 4;
      case 4: {
        if (tag == 33) {
         parse_prograde:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prograde_)));
          set_has_prograde();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_outward;
        break;
      }

      // required double outward = 5;
      case 5: {
        if (tag == 41) {
         parse_outward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &outward_)));
          set_has_outward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_plane;
        break;
      }

      // required double plane = 6;
      case 6: {
        if (tag == 49) {
         parse_plane:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &plane_)));
          set_has_plane();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_approach_vel;
        break;
      }

      // required double approach_vel = 7;
      case 7: {
        if (tag == 57) {
         parse_approach_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &approach_vel_)));
          set_has_approach_vel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_departure_vel;
        break;
      }

      // required double departure_vel = 8;
      case 8: {
        if (tag == 65) {
         parse_departure_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &departure_vel_)));
          set_has_departure_vel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_outward_angle;
        break;
      }

      // required double outward_angle = 9;
      case 9: {
        if (tag == 73) {
         parse_outward_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &outward_angle_)));
          set_has_outward_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_inclination;
        break;
      }

      // required double inclination = 10;
      case 10: {
        if (tag == 81) {
         parse_inclination:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &inclination_)));
          set_has_inclination();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_turning_angle;
        break;
      }

      // required double turning_angle = 11;
      case 11: {
        if (tag == 89) {
         parse_turning_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &turning_angle_)));
          set_has_turning_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_periapsis_altitude;
        break;
      }

      // required double periapsis_altitude = 12;
      case 12: {
        if (tag == 97) {
         parse_periapsis_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &periapsis_altitude_)));
          set_has_periapsis_altitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_planet;
        break;
      }

      // required string planet = 20;
      case 20: {
        if (tag == 162) {
         parse_planet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_planet()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->planet().data(), this->planet().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "planet");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pagmo.problem.TransXFlyBy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pagmo.problem.TransXFlyBy)
  return false;
#undef DO_
}

void TransXFlyBy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pagmo.problem.TransXFlyBy)
  // required double mjd = 1;
  if (has_mjd()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->mjd(), output);
  }

  // required double burn = 3;
  if (has_burn()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->burn(), output);
  }

  // required double prograde = 4;
  if (has_prograde()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->prograde(), output);
  }

  // required double outward = 5;
  if (has_outward()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->outward(), output);
  }

  // required double plane = 6;
  if (has_plane()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->plane(), output);
  }

  // required double approach_vel = 7;
  if (has_approach_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->approach_vel(), output);
  }

  // required double departure_vel = 8;
  if (has_departure_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->departure_vel(), output);
  }

  // required double outward_angle = 9;
  if (has_outward_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->outward_angle(), output);
  }

  // required double inclination = 10;
  if (has_inclination()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->inclination(), output);
  }

  // required double turning_angle = 11;
  if (has_turning_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->turning_angle(), output);
  }

  // required double periapsis_altitude = 12;
  if (has_periapsis_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->periapsis_altitude(), output);
  }

  // required string planet = 20;
  if (has_planet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->planet().data(), this->planet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "planet");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->planet(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pagmo.problem.TransXFlyBy)
}

::google::protobuf::uint8* TransXFlyBy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pagmo.problem.TransXFlyBy)
  // required double mjd = 1;
  if (has_mjd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->mjd(), target);
  }

  // required double burn = 3;
  if (has_burn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->burn(), target);
  }

  // required double prograde = 4;
  if (has_prograde()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->prograde(), target);
  }

  // required double outward = 5;
  if (has_outward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->outward(), target);
  }

  // required double plane = 6;
  if (has_plane()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->plane(), target);
  }

  // required double approach_vel = 7;
  if (has_approach_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->approach_vel(), target);
  }

  // required double departure_vel = 8;
  if (has_departure_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->departure_vel(), target);
  }

  // required double outward_angle = 9;
  if (has_outward_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->outward_angle(), target);
  }

  // required double inclination = 10;
  if (has_inclination()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->inclination(), target);
  }

  // required double turning_angle = 11;
  if (has_turning_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->turning_angle(), target);
  }

  // required double periapsis_altitude = 12;
  if (has_periapsis_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->periapsis_altitude(), target);
  }

  // required string planet = 20;
  if (has_planet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->planet().data(), this->planet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "planet");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->planet(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pagmo.problem.TransXFlyBy)
  return target;
}

int TransXFlyBy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double mjd = 1;
    if (has_mjd()) {
      total_size += 1 + 8;
    }

    // required double burn = 3;
    if (has_burn()) {
      total_size += 1 + 8;
    }

    // required double prograde = 4;
    if (has_prograde()) {
      total_size += 1 + 8;
    }

    // required double outward = 5;
    if (has_outward()) {
      total_size += 1 + 8;
    }

    // required double plane = 6;
    if (has_plane()) {
      total_size += 1 + 8;
    }

    // required double approach_vel = 7;
    if (has_approach_vel()) {
      total_size += 1 + 8;
    }

    // required double departure_vel = 8;
    if (has_departure_vel()) {
      total_size += 1 + 8;
    }

    // required double outward_angle = 9;
    if (has_outward_angle()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double inclination = 10;
    if (has_inclination()) {
      total_size += 1 + 8;
    }

    // required double turning_angle = 11;
    if (has_turning_angle()) {
      total_size += 1 + 8;
    }

    // required double periapsis_altitude = 12;
    if (has_periapsis_altitude()) {
      total_size += 1 + 8;
    }

    // required string planet = 20;
    if (has_planet()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->planet());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransXFlyBy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransXFlyBy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransXFlyBy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransXFlyBy::MergeFrom(const TransXFlyBy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mjd()) {
      set_mjd(from.mjd());
    }
    if (from.has_burn()) {
      set_burn(from.burn());
    }
    if (from.has_prograde()) {
      set_prograde(from.prograde());
    }
    if (from.has_outward()) {
      set_outward(from.outward());
    }
    if (from.has_plane()) {
      set_plane(from.plane());
    }
    if (from.has_approach_vel()) {
      set_approach_vel(from.approach_vel());
    }
    if (from.has_departure_vel()) {
      set_departure_vel(from.departure_vel());
    }
    if (from.has_outward_angle()) {
      set_outward_angle(from.outward_angle());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_inclination()) {
      set_inclination(from.inclination());
    }
    if (from.has_turning_angle()) {
      set_turning_angle(from.turning_angle());
    }
    if (from.has_periapsis_altitude()) {
      set_periapsis_altitude(from.periapsis_altitude());
    }
    if (from.has_planet()) {
      set_planet(from.planet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransXFlyBy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransXFlyBy::CopyFrom(const TransXFlyBy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransXFlyBy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void TransXFlyBy::Swap(TransXFlyBy* other) {
  if (other != this) {
    std::swap(mjd_, other->mjd_);
    std::swap(burn_, other->burn_);
    std::swap(prograde_, other->prograde_);
    std::swap(outward_, other->outward_);
    std::swap(plane_, other->plane_);
    std::swap(approach_vel_, other->approach_vel_);
    std::swap(departure_vel_, other->departure_vel_);
    std::swap(outward_angle_, other->outward_angle_);
    std::swap(inclination_, other->inclination_);
    std::swap(turning_angle_, other->turning_angle_);
    std::swap(periapsis_altitude_, other->periapsis_altitude_);
    std::swap(planet_, other->planet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransXFlyBy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransXFlyBy_descriptor_;
  metadata.reflection = TransXFlyBy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransXArrival::kMjdFieldNumber;
const int TransXArrival::kVinfFieldNumber;
const int TransXArrival::kBurnFieldNumber;
const int TransXArrival::kPlanetFieldNumber;
#endif  // !_MSC_VER

TransXArrival::TransXArrival()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pagmo.problem.TransXArrival)
}

void TransXArrival::InitAsDefaultInstance() {
}

TransXArrival::TransXArrival(const TransXArrival& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pagmo.problem.TransXArrival)
}

void TransXArrival::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mjd_ = 0;
  vinf_ = 0;
  burn_ = 0;
  planet_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransXArrival::~TransXArrival() {
  // @@protoc_insertion_point(destructor:pagmo.problem.TransXArrival)
  SharedDtor();
}

void TransXArrival::SharedDtor() {
  if (planet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete planet_;
  }
  if (this != default_instance_) {
  }
}

void TransXArrival::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransXArrival::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransXArrival_descriptor_;
}

const TransXArrival& TransXArrival::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fsolution_2eproto();
  return *default_instance_;
}

TransXArrival* TransXArrival::default_instance_ = NULL;

TransXArrival* TransXArrival::New() const {
  return new TransXArrival;
}

void TransXArrival::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TransXArrival*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(mjd_, burn_);
    if (has_planet()) {
      if (planet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        planet_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransXArrival::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pagmo.problem.TransXArrival)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double mjd = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mjd_)));
          set_has_mjd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_vinf;
        break;
      }

      // required double vinf = 2;
      case 2: {
        if (tag == 17) {
         parse_vinf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vinf_)));
          set_has_vinf();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_burn;
        break;
      }

      // required double burn = 3;
      case 3: {
        if (tag == 25) {
         parse_burn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &burn_)));
          set_has_burn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_planet;
        break;
      }

      // required string planet = 20;
      case 20: {
        if (tag == 162) {
         parse_planet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_planet()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->planet().data(), this->planet().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "planet");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pagmo.problem.TransXArrival)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pagmo.problem.TransXArrival)
  return false;
#undef DO_
}

void TransXArrival::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pagmo.problem.TransXArrival)
  // required double mjd = 1;
  if (has_mjd()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->mjd(), output);
  }

  // required double vinf = 2;
  if (has_vinf()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->vinf(), output);
  }

  // required double burn = 3;
  if (has_burn()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->burn(), output);
  }

  // required string planet = 20;
  if (has_planet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->planet().data(), this->planet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "planet");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->planet(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pagmo.problem.TransXArrival)
}

::google::protobuf::uint8* TransXArrival::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pagmo.problem.TransXArrival)
  // required double mjd = 1;
  if (has_mjd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->mjd(), target);
  }

  // required double vinf = 2;
  if (has_vinf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->vinf(), target);
  }

  // required double burn = 3;
  if (has_burn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->burn(), target);
  }

  // required string planet = 20;
  if (has_planet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->planet().data(), this->planet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "planet");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->planet(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pagmo.problem.TransXArrival)
  return target;
}

int TransXArrival::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double mjd = 1;
    if (has_mjd()) {
      total_size += 1 + 8;
    }

    // required double vinf = 2;
    if (has_vinf()) {
      total_size += 1 + 8;
    }

    // required double burn = 3;
    if (has_burn()) {
      total_size += 1 + 8;
    }

    // required string planet = 20;
    if (has_planet()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->planet());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransXArrival::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransXArrival* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransXArrival*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransXArrival::MergeFrom(const TransXArrival& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mjd()) {
      set_mjd(from.mjd());
    }
    if (from.has_vinf()) {
      set_vinf(from.vinf());
    }
    if (from.has_burn()) {
      set_burn(from.burn());
    }
    if (from.has_planet()) {
      set_planet(from.planet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransXArrival::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransXArrival::CopyFrom(const TransXArrival& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransXArrival::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TransXArrival::Swap(TransXArrival* other) {
  if (other != this) {
    std::swap(mjd_, other->mjd_);
    std::swap(vinf_, other->vinf_);
    std::swap(burn_, other->burn_);
    std::swap(planet_, other->planet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransXArrival::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransXArrival_descriptor_;
  metadata.reflection = TransXArrival_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransXSolution::kXFieldNumber;
const int TransXSolution::kProblemFieldNumber;
const int TransXSolution::kFuelCostFieldNumber;
const int TransXSolution::kTimesFieldNumber;
const int TransXSolution::kEscapeFieldNumber;
const int TransXSolution::kDsmsFieldNumber;
const int TransXSolution::kFlybyesFieldNumber;
const int TransXSolution::kArrivalFieldNumber;
#endif  // !_MSC_VER

TransXSolution::TransXSolution()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pagmo.problem.TransXSolution)
}

void TransXSolution::InitAsDefaultInstance() {
  times_ = const_cast< ::pagmo::problem::TransXTimes*>(&::pagmo::problem::TransXTimes::default_instance());
  escape_ = const_cast< ::pagmo::problem::TransXEscape*>(&::pagmo::problem::TransXEscape::default_instance());
  arrival_ = const_cast< ::pagmo::problem::TransXArrival*>(&::pagmo::problem::TransXArrival::default_instance());
}

TransXSolution::TransXSolution(const TransXSolution& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pagmo.problem.TransXSolution)
}

void TransXSolution::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  problem_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fuel_cost_ = 0;
  times_ = NULL;
  escape_ = NULL;
  arrival_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransXSolution::~TransXSolution() {
  // @@protoc_insertion_point(destructor:pagmo.problem.TransXSolution)
  SharedDtor();
}

void TransXSolution::SharedDtor() {
  if (problem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete problem_;
  }
  if (this != default_instance_) {
    delete times_;
    delete escape_;
    delete arrival_;
  }
}

void TransXSolution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransXSolution::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransXSolution_descriptor_;
}

const TransXSolution& TransXSolution::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fsolution_2eproto();
  return *default_instance_;
}

TransXSolution* TransXSolution::default_instance_ = NULL;

TransXSolution* TransXSolution::New() const {
  return new TransXSolution;
}

void TransXSolution::Clear() {
  if (_has_bits_[0 / 32] & 158) {
    if (has_problem()) {
      if (problem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        problem_->clear();
      }
    }
    fuel_cost_ = 0;
    if (has_times()) {
      if (times_ != NULL) times_->::pagmo::problem::TransXTimes::Clear();
    }
    if (has_escape()) {
      if (escape_ != NULL) escape_->::pagmo::problem::TransXEscape::Clear();
    }
    if (has_arrival()) {
      if (arrival_ != NULL) arrival_->::pagmo::problem::TransXArrival::Clear();
    }
  }
  x_.Clear();
  dsms_.Clear();
  flybyes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransXSolution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pagmo.problem.TransXSolution)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double x = 1;
      case 1: {
        if (tag == 9) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_x())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_x())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_x;
        if (input->ExpectTag(18)) goto parse_problem;
        break;
      }

      // required string problem = 2;
      case 2: {
        if (tag == 18) {
         parse_problem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_problem()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->problem().data(), this->problem().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "problem");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_fuel_cost;
        break;
      }

      // required double fuel_cost = 3;
      case 3: {
        if (tag == 25) {
         parse_fuel_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fuel_cost_)));
          set_has_fuel_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_times;
        break;
      }

      // required .pagmo.problem.TransXTimes times = 4;
      case 4: {
        if (tag == 34) {
         parse_times:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_times()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_escape;
        break;
      }

      // required .pagmo.problem.TransXEscape escape = 5;
      case 5: {
        if (tag == 42) {
         parse_escape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_escape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_dsms;
        break;
      }

      // repeated .pagmo.problem.TransXDSM dsms = 6;
      case 6: {
        if (tag == 50) {
         parse_dsms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dsms()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_dsms;
        if (input->ExpectTag(58)) goto parse_flybyes;
        break;
      }

      // repeated .pagmo.problem.TransXFlyBy flybyes = 7;
      case 7: {
        if (tag == 58) {
         parse_flybyes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_flybyes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_flybyes;
        if (input->ExpectTag(66)) goto parse_arrival;
        break;
      }

      // required .pagmo.problem.TransXArrival arrival = 8;
      case 8: {
        if (tag == 66) {
         parse_arrival:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arrival()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pagmo.problem.TransXSolution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pagmo.problem.TransXSolution)
  return false;
#undef DO_
}

void TransXSolution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pagmo.problem.TransXSolution)
  // repeated double x = 1;
  for (int i = 0; i < this->x_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->x(i), output);
  }

  // required string problem = 2;
  if (has_problem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->problem().data(), this->problem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "problem");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->problem(), output);
  }

  // required double fuel_cost = 3;
  if (has_fuel_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->fuel_cost(), output);
  }

  // required .pagmo.problem.TransXTimes times = 4;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->times(), output);
  }

  // required .pagmo.problem.TransXEscape escape = 5;
  if (has_escape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->escape(), output);
  }

  // repeated .pagmo.problem.TransXDSM dsms = 6;
  for (int i = 0; i < this->dsms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->dsms(i), output);
  }

  // repeated .pagmo.problem.TransXFlyBy flybyes = 7;
  for (int i = 0; i < this->flybyes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->flybyes(i), output);
  }

  // required .pagmo.problem.TransXArrival arrival = 8;
  if (has_arrival()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->arrival(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pagmo.problem.TransXSolution)
}

::google::protobuf::uint8* TransXSolution::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pagmo.problem.TransXSolution)
  // repeated double x = 1;
  for (int i = 0; i < this->x_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->x(i), target);
  }

  // required string problem = 2;
  if (has_problem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->problem().data(), this->problem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "problem");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->problem(), target);
  }

  // required double fuel_cost = 3;
  if (has_fuel_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->fuel_cost(), target);
  }

  // required .pagmo.problem.TransXTimes times = 4;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->times(), target);
  }

  // required .pagmo.problem.TransXEscape escape = 5;
  if (has_escape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->escape(), target);
  }

  // repeated .pagmo.problem.TransXDSM dsms = 6;
  for (int i = 0; i < this->dsms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->dsms(i), target);
  }

  // repeated .pagmo.problem.TransXFlyBy flybyes = 7;
  for (int i = 0; i < this->flybyes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->flybyes(i), target);
  }

  // required .pagmo.problem.TransXArrival arrival = 8;
  if (has_arrival()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->arrival(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pagmo.problem.TransXSolution)
  return target;
}

int TransXSolution::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required string problem = 2;
    if (has_problem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->problem());
    }

    // required double fuel_cost = 3;
    if (has_fuel_cost()) {
      total_size += 1 + 8;
    }

    // required .pagmo.problem.TransXTimes times = 4;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->times());
    }

    // required .pagmo.problem.TransXEscape escape = 5;
    if (has_escape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->escape());
    }

    // required .pagmo.problem.TransXArrival arrival = 8;
    if (has_arrival()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arrival());
    }

  }
  // repeated double x = 1;
  {
    int data_size = 0;
    data_size = 8 * this->x_size();
    total_size += 1 * this->x_size() + data_size;
  }

  // repeated .pagmo.problem.TransXDSM dsms = 6;
  total_size += 1 * this->dsms_size();
  for (int i = 0; i < this->dsms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dsms(i));
  }

  // repeated .pagmo.problem.TransXFlyBy flybyes = 7;
  total_size += 1 * this->flybyes_size();
  for (int i = 0; i < this->flybyes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->flybyes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransXSolution::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransXSolution* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransXSolution*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransXSolution::MergeFrom(const TransXSolution& from) {
  GOOGLE_CHECK_NE(&from, this);
  x_.MergeFrom(from.x_);
  dsms_.MergeFrom(from.dsms_);
  flybyes_.MergeFrom(from.flybyes_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_problem()) {
      set_problem(from.problem());
    }
    if (from.has_fuel_cost()) {
      set_fuel_cost(from.fuel_cost());
    }
    if (from.has_times()) {
      mutable_times()->::pagmo::problem::TransXTimes::MergeFrom(from.times());
    }
    if (from.has_escape()) {
      mutable_escape()->::pagmo::problem::TransXEscape::MergeFrom(from.escape());
    }
    if (from.has_arrival()) {
      mutable_arrival()->::pagmo::problem::TransXArrival::MergeFrom(from.arrival());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransXSolution::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransXSolution::CopyFrom(const TransXSolution& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransXSolution::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000009e) != 0x0000009e) return false;

  if (has_escape()) {
    if (!this->escape().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->dsms())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->flybyes())) return false;
  if (has_arrival()) {
    if (!this->arrival().IsInitialized()) return false;
  }
  return true;
}

void TransXSolution::Swap(TransXSolution* other) {
  if (other != this) {
    x_.Swap(&other->x_);
    std::swap(problem_, other->problem_);
    std::swap(fuel_cost_, other->fuel_cost_);
    std::swap(times_, other->times_);
    std::swap(escape_, other->escape_);
    dsms_.Swap(&other->dsms_);
    flybyes_.Swap(&other->flybyes_);
    std::swap(arrival_, other->arrival_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransXSolution::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransXSolution_descriptor_;
  metadata.reflection = TransXSolution_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace problem
}  // namespace pagmo

// @@protoc_insertion_point(global_scope)
